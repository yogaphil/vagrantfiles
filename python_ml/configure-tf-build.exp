#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Nov 13 15:48:26 2018
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./configure
match_max 100000
expect -exact "Please specify the location of python. \[Default is /usr/bin/python\]: "
send -- "/usr/bin/python3\r"
expect -exact "/usr/bin/python3\r
\r
\r
Found possible Python library paths:\r
  /usr/local/lib/python3.5/dist-packages\r
  /usr/lib/python3/dist-packages\r
Please input the desired Python library path to use.  Default is \[/usr/local/lib/python3.5/dist-packages\]\r
"
send -- "\r"
expect -exact "\r
Do you wish to build TensorFlow with jemalloc as malloc support? \[Y/n\]: "
send -- "\r"
expect -exact "\r
jemalloc as malloc support will be enabled for TensorFlow.\r
\r
Do you wish to build TensorFlow with Google Cloud Platform support? \[Y/n\]: "
send -- "\r"
expect -exact "\r
Google Cloud Platform support will be enabled for TensorFlow.\r
\r
Do you wish to build TensorFlow with Hadoop File System support? \[Y/n\]: "
send -- "\r"
expect -exact "\r
Hadoop File System support will be enabled for TensorFlow.\r
\r
Do you wish to build TensorFlow with Amazon AWS Platform support? \[Y/n\]: "
send -- "\r"
expect -exact "\r
Amazon AWS Platform support will be enabled for TensorFlow.\r
\r
Do you wish to build TensorFlow with Apache Kafka Platform support? \[Y/n\]: "
send -- "\r"
expect -exact "\r
Apache Kafka Platform support will be enabled for TensorFlow.\r
\r
Do you wish to build TensorFlow with XLA JIT support? \[y/N\]: "
send -- "\r"
expect -exact "\r
No XLA JIT support will be enabled for TensorFlow.\r
\r
Do you wish to build TensorFlow with GDR support? \[y/N\]: "
send -- "\r"
expect -exact "\r
No GDR support will be enabled for TensorFlow.\r
\r
Do you wish to build TensorFlow with VERBS support? \[y/N\]: "
send -- "\r"
expect -exact "\r
No VERBS support will be enabled for TensorFlow.\r
\r
Do you wish to build TensorFlow with OpenCL SYCL support? \[y/N\]: "
send -- "\r"
expect -exact "\r
No OpenCL SYCL support will be enabled for TensorFlow.\r
\r
Do you wish to build TensorFlow with CUDA support? \[y/N\]: "
send -- "\r"
expect -exact "\r
No CUDA support will be enabled for TensorFlow.\r
\r
Do you wish to download a fresh release of clang? (Experimental) \[y/N\]: "
send -- "\r"
expect -exact "\r
Clang will not be downloaded.\r
\r
Do you wish to build TensorFlow with MPI support? \[y/N\]: "
send -- "\r"
expect -exact "\r
No MPI support will be enabled for TensorFlow.\r
\r
Please specify optimization flags to use during compilation when bazel option \"--config=opt\" is specified \[Default is -march=native\]: "
send -- "-march=native -ftree-vectorize\r"
expect -exact "-march=native -ftree-vectorize\r
\r
\r
Would you like to interactively configure ./WORKSPACE for Android builds? \[y/N\]: "
send -- "\r"
expect eof

# -*- mode: ruby -*-
# vi: set ft=ruby :

# Copyright (C) 2018  Phillip M. West

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64" 

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end

  config.vm.provider "lxc" do |lxc, override|
    override.vm.box = "debian/stretch64" 
    lxc.customize 'cgroup.memory.limit_in_bytes', '8192M'
  end

  config.vm.provider "parallels" do |prl, override|
    override.vm.box = "parallels/ubuntu-16.04"
    prl.name = "python_ml"
    prl.memory = 8192
    prl.cpus = 6
  end

  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    echo ">>> Updating repository info..."
    apt-get update

    # ubuntu (under Parallels) needs to preselect the boot drive
    echo ">>> Preselecting grub-pc settings..."
    debconf-set-selections /vagrant/grub-pc.conf

    echo ">>> Upgrading packages..."
    apt-get -y upgrade
    apt-get -y autoremove

    echo ">>> Installing development packages..."
    # debian under vagrant-lxc needs libc-ares-dev
    apt-get install -y curl build-essential git expect libc-ares-dev
    apt-get install -y python3-dev python3-pip python3-venv
    pip3 install --upgrade pip
    pip3 install --upgrade virtualenv

    sudo -H -u vagrant pip3 install -U --user six numpy==1.14.5 wheel mock
    sudo -H -u vagrant pip3 install -U --user keras_applications==1.0.5 --no-deps
    sudo -H -u vagrant pip3 install -U --user keras_preprocessing==1.0.3 --no-deps

    # setup Oracle JDK8 repo (for debian, for ubuntu use apt-add-repository instead...)
    [ ! -f /etc/apt/sources.list.d/webupd8team-java.list ] && \
      echo "deb http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main" | \
      tee /etc/apt/sources.list.d/webupd8team-java.list && \
      echo "deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main" | \
      tee -a /etc/apt/sources.list.d/webupd8team-java.list && \
      apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C2518248EEA14886 && \
      apt-get update || echo "!!!!! Skipped or did not complete configuration of the Java repository"

    # preselect license for Oracle JDK
    echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | \
      /usr/bin/debconf-set-selections
 
    # setup bazel repo
    [ ! -f /etc/apt/sources.list.d/bazel.list ] && \
      echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | \
      tee /etc/apt/sources.list.d/bazel.list
    [ ! -f /vagrant/bazel-release.pub.gpg ] && \
      curl "https://bazel.build/bazel-release.pub.gpg" -o /vagrant/bazel-release.pub.gpg
    [ -f /vagrant/bazel-release.pub.gpg ] && \
      apt-key add /vagrant/bazel-release.pub.gpg && apt-get update || \
      echo "!!!!! Skipped or did not complete the configuration of the Bazel repository"

    # install JDK8 and bazel
    apt-get install -y oracle-java8-installer
    apt-get install -y bazel

    # make tmp dir for building tensorflow package below
    mkdir -p /vagrant/tmp

    [ ! -d /usr/local/src/tensorflow ] && cd /usr/local/src && git clone https://github.com/tensorflow/tensorflow.git
    cd /usr/local/src/tensorflow && git checkout r1.10
    chown -R vagrant /usr/local/src/tensorflow
    [ -d /usr/local/src/tensorflow ] && sudo -H -u vagrant /vagrant/configure-tf-build.exp \
      && sudo -H -u vagrant bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package \
      && sudo -H -u vagrant TMPDIR=/vagrant/tmp ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /vagrant/tensorflow_pkg

    [ -f /vagrant/tensorflow_pkg/tensorflow-1.10.1-cp35-cp35m-linux_x86_64.whl ] \
      && echo "Installing tensorflow..." \
      && sudo -H pip3 install /vagrant/tensorflow_pkg/tensorflow-1.10.1-cp35-cp35m-linux_x86_64.whl

    sudo -H -u vagrant python3 -m venv --system-site-packages /home/vagrant/tf

    echo "To verify tensorflow is installed and working properly, run:"
    echo "python3 /vagrant/tf_test.py"
    # uncomment to run the test automatically
    # python3 /vagrant/tf_test.py
  SHELL
end
